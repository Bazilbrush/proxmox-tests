name: test connecting to proxmox
run-name: ${{ github.actor }} is testing proxmox
on: 
  workflow_dispatch:
    inputs:
          tfpath:
              description: 'TF File Path'     
              required: false
              default: 'infra'
    # secrets:
    #   ARM_CLIENT_ID:
    #       description: 'service principal id'
    #       required: false
            
permissions:
    id-token: write
    contents: read

jobs:
  terraform-validate:
    uses: Bazilbrush/terraform-templates/.github/workflows/terraform-validate.yml@main
    with:
        tfpath: infra
  
  terraform-plan:
    uses: Bazilbrush/terraform-templates/.github/workflows/terraform-plan.yml@main
    if: ${{ always() }}
    needs: terraform-validate
    with:
        tfpath: infra
        backend-platform: aws
        TF_ENV: integration
        AWS_BUCKET: jackbazbackend
        BACKEND_KEY: tests/integration/proxmox.tfstate
        AWS_REGION: "eu-west-1"
        AWS_OIDC_ROLE: 'arn:aws:iam::520686339686:role/github-oidc'
        AWS_OIDC_SESSION_NAME: 'github-test'
        tailscale: true
        post_tasks: |
          - name: Debug tailscale status
            if: always()
            run: tailscale status

        # pre_tasks: |
        #   steps:
        #     - name: Get ephemeral Tailscale auth key
        #       id: get-key
        #       run: |
        #         AUTH_KEY_JSON=$(curl -s -X POST "https://api.tailscale.com/api/v2/tailnet/${{ secrets.TAILNET }}/keys" \
        #           -u "${{ secrets.TS_TOKEN }}:" \
        #           -H "Content-Type: application/json" \
        #           -d '{
        #             "capabilities": {
        #               "devices": {
        #                 "create": {
        #                   "reusable": false,
        #                   "ephemeral": true,
        #                   "preauthorized": true
        #                 }
        #               }
        #             },
        #             "expirySeconds": 600
        #           }')
                
        #         AUTH_KEY=$(echo "$AUTH_KEY_JSON" | jq -r .key)

        #         # Mask the key so it never appears in logs
        #         echo "::add-mask::$AUTH_KEY"

        #         # Store it for later steps
        #         echo "auth_key=$AUTH_KEY" >> $GITHUB_OUTPUT

        #   - name: Install Tailscale
        #     run: |
        #       curl -fsSL https://tailscale.com/install.sh | sh

        #   - name: Start Tailscaled (userspace networking mode)
        #     run: |
        #       sudo tailscaled --tun=userspace-networking --socks5-server=localhost:1055 &
        #       sleep 5

        #   - name: Connect to Tailscale
        #     run: |
        #       sudo tailscale up --authkey=${{ steps.get-key.outputs.auth_key }}

    secrets: inherit
     
         
      # PM_PASSWORD: ${{ secrets.pm_password }}
      # TS_TOKEN: ${{ secrets.TS_TOKEN }}
      # TAILNET: ${{ secrets.TAILNET }}


    #   - name: Tailscale
    # uses: tailscale/github-action@v3
    # with:
    #   oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
    #   oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
    #   tags: tag:ci
    #   version: 1.66.0  

  # register_to_tailscale:
  #   name: register tailscale
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2.5.0

  #     - name: get devices
  #       run: |
  #           curl 'https://api.tailscale.com/api/v2/tailnet/${{ secrets.TAILNET }}/devices' \
  #           --header 'Authorization: Bearer ${{ secrets.TS_TOKEN }}'

  #     - name: Get ephemeral Tailscale auth key
  #       id: get-key
  #       run: |
  #         AUTH_KEY_JSON=$(curl -s -X POST "https://api.tailscale.com/api/v2/tailnet/${{ secrets.TAILNET }}/keys" \
  #           -u "${{ secrets.TS_TOKEN }}:" \
  #           -H "Content-Type: application/json" \
  #           -d '{
  #             "capabilities": {
  #               "devices": {
  #                 "create": {
  #                   "reusable": false,
  #                   "ephemeral": true,
  #                   "preauthorized": true
  #                 }
  #               }
  #             },
  #             "expirySeconds": 600
  #           }')
          
  #         AUTH_KEY=$(echo "$AUTH_KEY_JSON" | jq -r .key)

  #         # Mask the key so it never appears in logs
  #         echo "::add-mask::$AUTH_KEY"

  #         # Store it for later steps
  #         echo "auth_key=$AUTH_KEY" >> $GITHUB_OUTPUT


  #     - name: Install Tailscale
  #       run: |
  #         curl -fsSL https://tailscale.com/install.sh | sh

  #     - name: Start Tailscaled (userspace networking mode)
  #       run: |
  #         sudo tailscaled --tun=userspace-networking --socks5-server=localhost:1055 &
  #         sleep 5

  #     - name: Connect to Tailscale
  #       run: |
  #         sudo tailscale up --authkey=${{ steps.get-key.outputs.auth_key }}

  #     # - name: Debug tailscale status
  #     #   run: tailscale status

  #     - name: Run your tasks
  #       run: |
  #         # Example: connect to a private service inside your tailnet
  #         # curl --socks5 localhost:1055 -v http://${{ secrets.SERVICE }}/
  #         curl -v http://${{ secrets.SERVICE }}/